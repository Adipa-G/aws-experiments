AWSTemplateFormatVersion: 2010-09-09
Description: This stack is used to provision the CI/CD pipeline for a simple API to be packaged into a docker container and to deploy it to AWS Fargate
Parameters:
  ProjectName:
    Type: String
    Default: grails-app
    Description: Name for the project (only lower case letters with '-')
  KeyAlias:
    Type: String
    Default: aws/s3
    Description: This is AWS managed key alias. And should exist in both deployment region and us-east-1 region.

Resources:
  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      RoleName: !Sub 'deploy.${ProjectName}.role'
      Policies:
        - PolicyName: InfrastructureProvisioning
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: cloudwatch:*
                Resource: '*'
              - Effect: Allow
                Action: ec2:*
                Resource: '*'
              - Effect: Allow
                Action: ecs:*
                Resource: '*'
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: codedeploy:*
                Resource: '*'
              - Effect: Allow
                Action: xray:*
                Resource: '*'
              - Effect: Allow
                Action: iam:*
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:*
                Resource: '*'
              - Effect: Allow
                Action: kms:*
                Resource: '*'
              - Effect: Allow
                Action: logs:*
                Resource: '*'
              - Effect: Allow
                Action: elasticloadbalancingv2:*
                Resource: '*'
              - Effect: Allow
                Action: elasticloadbalancing:*
                Resource: '*'
              - Effect: Allow
                Action: application-autoscaling:*
                Resource: '*'
              - Effect: Allow
                Action: secretsmanager:*
                Resource: '*'
              - Effect: Allow
                Action: codepipeline:*
                Resource: '*'
              - Effect: Allow
                Action: codebuild:*
                Resource: '*'
              - Effect: Allow
                Action: wafv2:*
                Resource: '*'
              - Effect: Allow
                Action: cloudfront:*
                Resource: '*'
              - Effect: Allow
                Action: lambda:*
                Resource: '*'
              - Effect: Allow
                Action: edgelambda:*
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  PipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'provision.${ProjectName}.s3'
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Join ['',['arn:aws:kms:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':alias/', !Ref KeyAlias]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id: Purge after 2 days of creation
          ExpirationInDays: 2
          Status: Enabled
      Tags:
        - Key: Project
          Value: !Ref ProjectName
          
  PipelineBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    DependsOn : PipelineBucket
    Properties: 
      Bucket: !Ref PipelineBucket
      PolicyDocument: 
        Statement: 
          - Sid: CodeBuildServicePermit
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 's3:*'
            Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3'
          - Sid: CodePipelineServicePermit
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 's3:*'
            Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3'
          - Sid: AllowAccountAccess
            Effect: Allow
            Principal:
              AWS: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 's3:*'
            Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3'
          - Sid: AllowAccountAccessObjects
            Effect: Allow
            Principal:
              AWS: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 's3:*'
            Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3/*'
  
  PipelineUSEastFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          var aws = require('aws-sdk');
          var response = require('cfn-response');
          exports.handler = function (event, context, callback) {
            console.log(event)

            var s3 = new aws.S3({
              region: event.ResourceProperties.BucketRegion
            });
            var bucketName = event.ResourceProperties.BucketName;

            if (event.RequestType == 'Create' || event.RequestType == 'Update') {
              var bucketParams = {
                Bucket: bucketName,
              };
              s3.createBucket(bucketParams, function (err, createData) {
                if (err) {
                  console.log(err, err.stack)
                  response.send(event, context, response.FAILED, err, event.PhysicalResourceId)
                } else {
                  var encryptionParams = {
                    Bucket: bucketName,
                    ServerSideEncryptionConfiguration: {
                      Rules: [{
                          ApplyServerSideEncryptionByDefault: {
                            SSEAlgorithm: 'aws:kms',
                            KMSMasterKeyID: event.BucketKey
                          },
                          BucketKeyEnabled: true
                        }
                      ]
                    }
                  }
                  s3.putBucketEncryption(encryptionParams, function (err, data) {
                    if (err) {
                        console.log(err, err.stack);
                        response.send(event, context, response.FAILED, err, event.PhysicalResourceId)
                        callback(new Error('Unable to setup encryption'));
                    } else {
                      var publicAccessBlockParams = {
                        Bucket: bucketName,
                        PublicAccessBlockConfiguration: {
                          BlockPublicAcls: true,
                          BlockPublicPolicy: true,
                          IgnorePublicAcls: true,
                          RestrictPublicBuckets: true
                        }
                      };
                        s3.putPublicAccessBlock(publicAccessBlockParams, function (err, data) {
                        if (err) {
                          console.log(err, err.stack);
                          response.send(event, context, response.FAILED, err, event.PhysicalResourceId)
                          callback(new Error('Unable to setup lifecycle'));
                        } else {
                          var bucketLifecycleParams = {
                            Bucket: bucketName,
                            LifecycleConfiguration: {
                              Rules: [{
                                  Expiration: {
                                    Days: 2
                                  },
                                  ID: "AutoPurgeAfter2DaysOfCreation",
                                  Prefix: "",
                                  Status: "Enabled"
                                }
                              ]
                            }
                          };
                          s3.putBucketLifecycleConfiguration(bucketLifecycleParams, function (err, data) {
                            if (err) {
                              console.log(err, err.stack);
                              response.send(event, context, response.FAILED, err, event.PhysicalResourceId)
                              callback(new Error('Unable to setup lifecycle'));
                            } else {
                              var bucketPolicyParams = {
                                Bucket: bucketName,
                                Policy: event.ResourceProperties.Policy
                              };
                              s3.putBucketPolicy(bucketPolicyParams, function (err, data) {
                                if (err) {
                                  console.log(err, err.stack);
                                  response.send(event, context, response.FAILED, err, event.PhysicalResourceId)
                                  callback(new Error('Unable to setup policy'));
                                } else {
                                  response.send(event, context, response.SUCCESS, createData, event.PhysicalResourceId);
                                  callback(null);
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            } else if (event.RequestType == 'Delete') {
              var deleteParams = {
                  Bucket: bucketName,
              };

              s3.deleteBucket(deleteParams, function (err, data) {
                if (err) {
                  console.log(err, err.stack);
                  response.send(event, context, response.FAILED, data, event.PhysicalResourceId);
                  callback(new Error('Unable to delete bucket'));
                } else {
                  console.log(data)
                  response.send(event, context, response.SUCCESS, err, event.PhysicalResourceId);
                  callback(null);
                }
              });
            }
          };
      Handler: index.handler
      Role: !GetAtt DeployRole.Arn
      Runtime: nodejs14.x
      Timeout: 5

  PipelineUSEastBucket1:
    Type: Custom::LambdaTrig
    Properties:
      ServiceToken: !GetAtt PipelineUSEastFunction.Arn
      BucketName: !Sub "provision.cloudfront.${ProjectName}.s3"
      BucketRegion: us-east-1
      BucketKey: !Join ['',['arn:aws:kms:', 'us-east-1', ':', !Ref AWS::AccountId, ':alias/', !Ref KeyAlias]]
      Policy: !Sub |
        {
          "Version": "2012-10-17", 
          "Statement": [{ 
            "Sid": "CodeBuildServicePermit",
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            }, 
            "Action": "s3:*", 
            "Resource": "arn:aws:s3:::provision.cloudfront.${ProjectName}.s3" 
          },{ 
            "Sid": "CodePipelineServicePermit",
            "Effect": "Allow",
            "Principal": {
              "Service": "codepipeline.amazonaws.com"
            }, 
            "Action": "s3:*", 
            "Resource": "arn:aws:s3:::provision.cloudfront.${ProjectName}.s3" 
          },{ 
            "Sid": "AllowAccountAccess",
            "Effect": "Allow",
            "Principal": {
              "AWS": "arn:aws:iam::${AWS::AccountId}:root"
            }, 
            "Action": "s3:*", 
            "Resource": "arn:aws:s3:::provision.cloudfront.${ProjectName}.s3" 
          },{ 
            "Sid": "AllowAccountAccessObjects",
            "Effect": "Allow",
            "Principal": {
              "AWS": "arn:aws:iam::${AWS::AccountId}:root"
            }, 
            "Action": "s3:*", 
            "Resource": "arn:aws:s3:::provision.cloudfront.${ProjectName}.s3/*" 
          }]
        }

  PipelineRole:
    Type: AWS::IAM::Role
    DependsOn:
      - DeployRole
      - PipelineBucket
      - PipelineUSEastBucket1
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Sub 'pipeline.${ProjectName}.role'
      Policies:
        - PolicyName: BuildPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codebuild:*
                Resource: '*'
              - Effect: Allow
                Action: cloudwatch:*
                Resource: '*'
              - Effect: Allow
                Action: logs:*
                Resource: '*'
              - Effect: Allow
                Action: ecr:*
                Resource: '*'
        - PolicyName: BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3'
                Action: 's3:*'
              - Effect: Allow
                Resource: !Sub 'arn:aws:s3:::provision.${ProjectName}.s3/*'
                Action: 's3:*'
              - Effect: Allow
                Resource: !Sub 'arn:aws:s3:::provision.cloudfront.${ProjectName}.s3'
                Action: 's3:*'
              - Effect: Allow
                Resource: !Sub 'arn:aws:s3:::provision.cloudfront.${ProjectName}.s3/*'
                Action: 's3:*'
        - PolicyName: AssumeDeployRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  PipelineECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub '${ProjectName}.ecr'
      RepositoryPolicyText: 
        Version: '2008-10-17'
        Statement:
        - Sid: AllowPushPull
          Effect: Allow
          Principal:
            AWS:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
          - ecr:*

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn : PipelineRole
    Properties:
      Name: !Sub '${ProjectName}-build'
      Description: Builds the code and package the cloudformation templates
      Artifacts:
        Type: CODEPIPELINE
      ConcurrentBuildLimit: 1
      Environment: 
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Sub ${AWS::Region}
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: IMAGE_REPO_NAME
            Value: !Sub '${ProjectName}.ecr'
          - Name: ENV_OUTPUT_BUCKET
            Value: !Sub provision.${ProjectName}.s3
        PrivilegedMode: true
      ServiceRole: !GetAtt PipelineRole.Arn
      Source: 
        Type: CODEPIPELINE
        BuildSpec: grails-app-docker-code-pipeline-example/codepipeline/buildspec.yaml
      Tags:
        - Key: Project
          Value: !Ref ProjectName
  
  Pipeline:
      Type: AWS::CodePipeline::Pipeline
      DependsOn:
        - DeployRole
        - PipelineRole
        - CodeBuildProject
        - PipelineUSEastBucket1
      Properties:
        Tags:
          - Key: Project
            Value: !Ref ProjectName
        ArtifactStores: 
          - ArtifactStore: 
              Location: !Sub provision.${ProjectName}.s3
              Type: S3
              EncryptionKey:
                Id: !Join ['',['arn:aws:kms:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':alias/', !Ref KeyAlias]]
                Type: KMS
            Region: !Sub ${AWS::Region}
          - ArtifactStore: 
              Location: !Sub provision.cloudfront.${ProjectName}.s3
              Type: S3
              EncryptionKey:
                Id: !Join ['',['arn:aws:kms:', 'us-east-1', ':', !Ref AWS::AccountId, ':alias/', !Ref KeyAlias]]
                Type: KMS
            Region: us-east-1
        Name: !Sub provision.${ProjectName}.pipeline
        RoleArn: !GetAtt PipelineRole.Arn
        Stages:
            - Name: Source
              Actions:
                - Name: GitHubRepo
                  Namespace: SourceVariables
                  ActionTypeId:
                    Category: Source
                    Owner: ThirdParty
                    Provider: GitHub
                    Version: '1'
                  Configuration:
                    Owner: Adipa-G
                    Repo: aws-experiments
                    Branch: test
                    OAuthToken:  "{{resolve:secretsmanager:github-pat-token:SecretString:token}}"
                  OutputArtifacts:
                    - Name: SourceArtefact
                  RunOrder: 1
            - Name: UpdatePipeline
              Actions:
                - Name: CreateChangeSet
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_REPLACE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-pipeline-stack'
                    ChangeSetName: !Sub '${ProjectName}-pipeline-change-set-#{SourceVariables.CommitId}'
                    TemplatePath: SourceArtefact::grails-app-docker-code-pipeline-example/codepipeline/pipeline-stack.yaml
                    Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                    ParameterOverrides: !Sub |
                      { 
                        "ProjectName" : "${ProjectName}"
                      }
                  InputArtifacts:
                    - Name: SourceArtefact
                  RunOrder: 1
                - Name: ExecuteChangeSet
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_EXECUTE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-pipeline-stack'
                    ChangeSetName: !Sub '${ProjectName}-pipeline-change-set-#{SourceVariables.CommitId}'
                  RunOrder: 2
            - Name: Build
              Actions:
                - Name: CodeBuild
                  Namespace: BuildVariables
                  ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Provider: CodeBuild
                    Version: '1'
                  Configuration:
                    ProjectName: !Ref CodeBuildProject
                  InputArtifacts:
                    - Name: SourceArtefact
                  OutputArtifacts:
                    - Name: OutputArtefact
                  RunOrder: 1
            - Name: DeployApp
              Actions:
                - Name: CreateChangeSet
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_REPLACE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-stack'
                    ChangeSetName: !Sub '${ProjectName}-change-set-#{BuildVariables.CODEBUILD_BUILD_NUMBER}'
                    TemplatePath: OutputArtefact::grails-app-docker-code-pipeline-example/cloudformationtemplates/template-private-subnet.yaml
                    Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                    ParameterOverrides: !Sub |
                      { 
                        "ProjectName" : "${ProjectName}",
                        "ContainerImageUrl" : "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}.ecr:#{BuildVariables.CODEBUILD_BUILD_NUMBER}",
                        "EnvironmentBucketName": "provision.${ProjectName}.s3",
                        "EnvironmentBucketKey": "env/cloud_#{BuildVariables.CODEBUILD_BUILD_NUMBER}.env"
                      }
                  InputArtifacts:
                    - Name: OutputArtefact
                  RunOrder: 1
                - Name: ExecuteChangeSet
                  Namespace: APIDeploy
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_EXECUTE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-stack'
                    ChangeSetName: !Sub '${ProjectName}-change-set-#{BuildVariables.CODEBUILD_BUILD_NUMBER}'
                  OutputArtifacts:
                    - Name: !Sub '${ProjectName}-ecs-ChangeSet'
                  RunOrder: 2
            - Name: DeployCloudFront
              Actions:
                - Name: CreateChangeSet
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  Region: us-east-1
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_REPLACE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-cloudfront-stack'
                    ChangeSetName: !Sub '${ProjectName}-cloudfront-change-set-#{BuildVariables.CODEBUILD_BUILD_NUMBER}'
                    TemplatePath: OutputArtefact::grails-app-docker-code-pipeline-example/cloudformationtemplates/template-cloud-front.yaml
                    Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                    ParameterOverrides: !Sub |
                      { 
                        "ALBDNS" : "#{APIDeploy.ALBDNS}",
                        "BuildNumber" : "#{BuildVariables.CODEBUILD_BUILD_NUMBER}"
                      }
                  InputArtifacts:
                    - Name: OutputArtefact
                  RunOrder: 1
                - Name: ExecuteChangeSet
                  Namespace: CloudFrontDeploy
                  RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                  Region: us-east-1
                  ActionTypeId:
                    Category: Deploy
                    Owner: AWS
                    Provider: CloudFormation
                    Version: '1'
                  Configuration:
                    ActionMode: CHANGE_SET_EXECUTE
                    RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/deploy.${ProjectName}.role
                    StackName: !Sub '${ProjectName}-cloudfront-stack'
                    ChangeSetName: !Sub '${ProjectName}-cloudfront-change-set-#{BuildVariables.CODEBUILD_BUILD_NUMBER}'
                  OutputArtifacts:
                    - Name: !Sub '${ProjectName}-cloudfront-ChangeSet'
                  RunOrder: 2